 Step 1: Generate SQL for Manual Migration

  As requested, here is the SQL code to create all the necessary tables and types based on your schema.prisma file. You
  will run this directly on your Render database.

  First, create the custom ENUM types:



    CREATE TYPE "UserRole" AS ENUM ('TEACHER', 'STUDENT');
    CREATE TYPE "Gender" AS ENUM ('MALE', 'FEMALE', 'OTHER');
    CREATE TYPE "MaterialType" AS ENUM ('pdf', 'docx', 'youtube');
    CREATE TYPE "QuizType" AS ENUM ('PRETEST', 'POSTTEST');
    CREATE TYPE "ClassStatus" AS ENUM ('ACTIVE', 'INACTIVE', 'MAIN_SESSION', 'GROUP_SESSION', 'POSTTEST');


  Now, create the tables:


CREATE TABLE "User" (
    "id" VARCHAR(255) PRIMARY KEY,
    "email" VARCHAR(255) UNIQUE NOT NULL,
    "name" VARCHAR(255) NOT NULL,
    "password" VARCHAR(255) NOT NULL,
    "gender" "Gender" NOT NULL,
    "role" "UserRole" NOT NULL,
    "phone" VARCHAR(255),
    "address" VARCHAR(255),
    "isProfileComplete" BOOLEAN NOT NULL DEFAULT false,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL
);

CREATE TABLE "Class" (
    "id" VARCHAR(255) PRIMARY KEY,
    "name" VARCHAR(255) NOT NULL,
    "classCode" VARCHAR(255) UNIQUE NOT NULL,
    "teacherId" VARCHAR(255) NOT NULL,
    "posttestUsesPretestQuestions" BOOLEAN NOT NULL DEFAULT false,
    "status" "ClassStatus" NOT NULL DEFAULT 'ACTIVE',
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    "updatedAt" TIMESTAMP(3) NOT NULL,
    FOREIGN KEY ("teacherId") REFERENCES "User"("id") ON DELETE CASCADE
);

CREATE TABLE "StudentEnrollment" (
    "id" VARCHAR(255) PRIMARY KEY,
    "classId" VARCHAR(255) NOT NULL,
    "studentId" VARCHAR(255) NOT NULL,
    "groupNumber" INTEGER,
    "pretestScore" REAL,
    "posttestScore" REAL,
    FOREIGN KEY ("classId") REFERENCES "Class"("id") ON DELETE CASCADE,
    FOREIGN KEY ("studentId") REFERENCES "User"("id") ON DELETE CASCADE,
    UNIQUE ("classId", "studentId")
);

CREATE TABLE "Material" (
    "id" VARCHAR(255) PRIMARY KEY,
    "classId" VARCHAR(255) NOT NULL,
    "type" "MaterialType" NOT NULL,
    "title" VARCHAR(255) NOT NULL,
    "url" VARCHAR(255) NOT NULL,
    "createdAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY ("classId") REFERENCES "Class"("id") ON DELETE CASCADE
);

CREATE TABLE "Quiz" (
    "id" VARCHAR(255) PRIMARY KEY,
    "title" VARCHAR(255) NOT NULL,
    "timeLimitMinutes" INTEGER NOT NULL,
    "type" "QuizType" NOT NULL,
    "classId_pretest" VARCHAR(255) UNIQUE,
    "classId_posttest" VARCHAR(255) UNIQUE,
    FOREIGN KEY ("classId_pretest") REFERENCES "Class"("id") ON DELETE SET NULL,
    FOREIGN KEY ("classId_posttest") REFERENCES "Class"("id") ON DELETE SET NULL
);

CREATE TABLE "Question" (
    "id" VARCHAR(255) PRIMARY KEY,
    "quizId" VARCHAR(255) NOT NULL,
    "text" TEXT NOT NULL,
    "options" TEXT[] NOT NULL,
    "correctAnswerIndex" INTEGER NOT NULL,
    FOREIGN KEY ("quizId") REFERENCES "Quiz"("id") ON DELETE CASCADE
);

CREATE TABLE "QuizSubmission" (
    "id" VARCHAR(255) PRIMARY KEY,
    "quizId" VARCHAR(255) NOT NULL,
    "studentId" VARCHAR(255) NOT NULL,
    "score" REAL NOT NULL,
    "submittedAt" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY ("quizId") REFERENCES "Quiz"("id") ON DELETE CASCADE,
    FOREIGN KEY ("studentId") REFERENCES "User"("id") ON DELETE CASCADE
);

CREATE TABLE "GroupNote" (
    "id" VARCHAR(255) PRIMARY KEY,
    "classId" VARCHAR(255) NOT NULL,
    "groupId" INTEGER NOT NULL,
    "content" TEXT NOT NULL DEFAULT '',
    "updatedAt" TIMESTAMP(3) NOT NULL,
    UNIQUE ("classId", "groupId")
);

CREATE TABLE "ChatMessage" (
    "id" VARCHAR(255) PRIMARY KEY,
    "classId" VARCHAR(255) NOT NULL,
    "groupId" INTEGER,
    "senderId" VARCHAR(255) NOT NULL,
    "text" TEXT NOT NULL,
    "isAI" BOOLEAN NOT NULL DEFAULT false,
    "timestamp" TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY ("senderId") REFERENCES "User"("id") ON DELETE CASCADE
);


  


  Step 2: Prepare Your Codebase for Deployment

  You need to make two small but critical changes.


   1. Add a `build` script to your backend's `package.json`. This is required for Render to compile your TypeScript code
      into JavaScript.
   2. Update your frontend's API service to use an environment variable for the backend URL.

    Step 3: Deployment Steps on Render


   1. Create a Render Account: Sign up at https://render.com/ (https://render.com/) using your GitHub account.
   2. Create a New PostgreSQL Database:
       * Go to your Dashboard and click New + -> PostgreSQL.
       * Give it a name (e.g., biolearn-db) and choose the free plan.
       * Once created, go to the Connect tab and find the "External Database URL". Copy this; you will need it for your
         backend environment variables.
       * Navigate to the Shell tab for your new database and paste the SQL queries from Step 1 to create your tables.
   3. Deploy the Backend:
       * Click New + -> Web Service.
       * Connect your GitHub repository (exoxegroup/biolearn).
       * Configure the service:
           * Name: biolearn-backend
           * Root Directory: backend
           * Build Command: npm install && npm run build
           * Start Command: node dist/index.js
       * Under the Environment tab, add the following secrets:
           * DATABASE_URL: The external database URL you copied earlier.
           * JWT_SECRET: A long, random, and secure string.
           * NEXTAUTH_URL: You will set this to your frontend's URL once it's deployed (e.g.,
             https://biolearn-frontend.onrender.com).
   4. Deploy the Frontend:
       * Click New + -> Static Site.
       * Connect the same GitHub repository.
       * Configure the site:
           * Name: biolearn-frontend
           * Root Directory: frontend
           * Build Command: npm install && npm run build
           * Publish Directory: dist
       * Under the Environment tab, add the following:
           * VITE_API_URL: The URL of your deployed backend (e.g., https://biolearn-backend.onrender.com/api).


  After completing these steps, your application should be successfully deployed! Let me know if you have any other
  questions.